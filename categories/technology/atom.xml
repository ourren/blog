<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Ourren]]></title>
  <link href="http://blog.ourren.com/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://blog.ourren.com/blog/"/>
  <updated>2015-07-20T23:57:26-07:00</updated>
  <id>http://blog.ourren.com/blog/</id>
  <author>
    <name><![CDATA[ourren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python中的常用代码]]></title>
    <link href="http://blog.ourren.com/blog/2015/07/19/pythonzhong-de-chang-yong-dai-ma/"/>
    <updated>2015-07-19T17:17:33-07:00</updated>
    <id>http://blog.ourren.com/blog/2015/07/19/pythonzhong-de-chang-yong-dai-ma</id>
    <content type="html"><![CDATA[<p>日常Python代码中会经常遇到一些可以用很简短的代码即可实现的功能，不用自己去撸一个单独的函数或者多个循环语句了。其实一般主要靠Google搜索关键字即可在<a href="http://stackoverflow.com/">stackoverflow</a>找到，只能说像我等伪程序员离开网络写代码质量会直线下降。贴到这里也是方便自己使用，代码比较基础，仅作笔记使用。</p>

<h4>合并列表值</h4>

<p>输入的两个数组，输出一个是数组&amp;值相加或者相乘，原文：<a href="http://stackoverflow.com/questions/14050824/add-sum-of-values-of-two-lists-into-new-list">eg-1</a>：</p>

<pre><code># input
first = [1,2,3,4,5]
second = [6,7,8,9,10]

#output
three = [7,9,11,13,15]

# The zip function is useful here, used with a list comprehension.
# add
[x + y for x, y in zip(first, second)]

# other
[x*y for x, y in zip(first, second)]
[max(x,y) for x, y in zip(first, second)]
</code></pre>

<p>其实也可以遍历列表长度，然后操作。</p>

<!--more-->


<p>另外如果对一个列表进行去重，直接采用set进行操作即可：</p>

<pre><code>in_list = ['1', '2', '1', '3']
in_list = list(set(in_list))
</code></pre>

<h4>合并字典值</h4>

<p>合并两个字典，并将相同键的值进行操作，可以利用collections中的Counter进行操作，原文：<a href="http://stackoverflow.com/questions/11011756/is-there-any-pythonic-way-to-combine-two-dicts-adding-values-for-keys-that-appe">eg-2</a>：</p>

<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; A = Counter({'a':1, 'b':2, 'c':3})
&gt;&gt;&gt; B = Counter({'b':3, 'c':4, 'd':5})
&gt;&gt;&gt; A + B
Counter({'c': 7, 'b': 5, 'd': 5, 'a': 1})
</code></pre>

<p>更多Counter的操作可以参考官网指南，<a href="https://docs.python.org/2/library/collections.html#collections.Counter">collections</a>.</p>

<h4>json与字典转换</h4>

<p>不管是存储到数据库还是网络接口输出，都可以采用json格式，格式非常容易操作，而dict类型在Python中也很好操作，而且还可以嵌套。</p>

<pre><code>import json
data = {'a':"A",'b':(2,4),'c':3.0}  # dict

data_string = json.dumps(data) # string &amp; json
print "ENCODED:",data_string

decoded = json.loads(data_string) ## dict
print "DECODED:",decoded
</code></pre>

<h4>多列数据表与字段</h4>

<p>有时候插入或者更新数据的时候数据表会有很多字段，这时也可以采用dict进行操作：</p>

<pre><code>people_dict = {'name':'name', 'password':'password', 'salt':'salt'} # long dict
columns = ', '.join(people_dict.keys())
placeholders = ', '.join('?' * len(people_dict))
insert_sql = 'INSERT INTO user ({}) VALUES ({})'.format(columns, placeholders)
cursor_obj.execute(insert_sql, people_dict.values())
</code></pre>

<p>另外数据库插入一般可以采用executemany进行操作：</p>

<pre><code>in_list = [('a','1'),('b','2')]
c.executemany(""" INSERT INTO result ('name','value') values(?,?)""", in_list)
</code></pre>

<h4>排序问题</h4>

<p>字典根据键排序， 原文：<a href="http://stackoverflow.com/questions/9001509/how-can-i-sort-a-dictionary-by-key">eg-3</a>：</p>

<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = {2:3, 1:89, 4:5, 3:0}
&gt;&gt;&gt; od = collections.OrderedDict(sorted(d.items()))
&gt;&gt;&gt; od
&gt;&gt;&gt; OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])
</code></pre>

<p>字典根据值排序， 原文：<a href="http://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value">eg-4</a>：</p>

<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
&gt;&gt;&gt; sorted_x = sorted(x.items(), key=operator.itemgetter(1))
&gt;&gt;&gt; sorted_x
[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
</code></pre>

<h4>日期操作</h4>

<p>格式化日期与unixtimestamp的相互转换，原文：<a href="http://www.saltycrane.com/blog/2008/11/python-datetime-time-conversions/">eg-5</a>：</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; dt = datetime.datetime(2010, 2, 25, 23, 23)
&gt;&gt;&gt; time.mktime(dt.timetuple())
&gt;&gt;&gt; 

from datetime import datetime
import time

#-------------------------------------------------
# conversions to strings
#-------------------------------------------------
# datetime object to string
dt_obj = datetime(2008, 11, 10, 17, 53, 59)
date_str = dt_obj.strftime("%Y-%m-%d %H:%M:%S")
print date_str

# time tuple to string
time_tuple = (2008, 11, 12, 13, 51, 18, 2, 317, 0)
date_str = time.strftime("%Y-%m-%d %H:%M:%S", time_tuple)
print date_str

#-------------------------------------------------
# conversions to datetime objects
#-------------------------------------------------
# time tuple to datetime object
time_tuple = (2008, 11, 12, 13, 51, 18, 2, 317, 0)
dt_obj = datetime(*time_tuple[0:6])
print repr(dt_obj)

# date string to datetime object
date_str = "2008-11-10 17:53:59"
dt_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
print repr(dt_obj)

# timestamp to datetime object in local time
timestamp = 1226527167.595983
dt_obj = datetime.fromtimestamp(timestamp)
print repr(dt_obj)

# timestamp to datetime object in UTC
timestamp = 1226527167.595983
dt_obj = datetime.utcfromtimestamp(timestamp)
print repr(dt_obj)

#-------------------------------------------------
# conversions to time tuples
#-------------------------------------------------
# datetime object to time tuple
dt_obj = datetime(2008, 11, 10, 17, 53, 59)
time_tuple = dt_obj.timetuple()
print repr(time_tuple)

# string to time tuple
date_str = "2008-11-10 17:53:59"
time_tuple = time.strptime(date_str, "%Y-%m-%d %H:%M:%S")
print repr(time_tuple)

# timestamp to time tuple in UTC
timestamp = 1226527167.595983
time_tuple = time.gmtime(timestamp)
print repr(time_tuple)

# timestamp to time tuple in local time
timestamp = 1226527167.595983
time_tuple = time.localtime(timestamp)
print repr(time_tuple)

#-------------------------------------------------
# conversions to timestamps
#-------------------------------------------------
# time tuple in local time to timestamp
time_tuple = (2008, 11, 12, 13, 59, 27, 2, 317, 0)
timestamp = time.mktime(time_tuple)
print repr(timestamp)

# time tuple in utc time to timestamp
time_tuple_utc = (2008, 11, 12, 13, 59, 27, 2, 317, 0)
timestamp_utc = calendar.timegm(time_tuple_utc)
print repr(timestamp_utc)

#-------------------------------------------------
# results
#-------------------------------------------------
# 2008-11-10 17:53:59
# 2008-11-12 13:51:18
# datetime.datetime(2008, 11, 12, 13, 51, 18)
# datetime.datetime(2008, 11, 10, 17, 53, 59)
# datetime.datetime(2008, 11, 12, 13, 59, 27, 595983)
# datetime.datetime(2008, 11, 12, 21, 59, 27, 595983)
# (2008, 11, 10, 17, 53, 59, 0, 315, -1)
# (2008, 11, 10, 17, 53, 59, 0, 315, -1)
# (2008, 11, 12, 21, 59, 27, 2, 317, 0)
# (2008, 11, 12, 13, 59, 27, 2, 317, 0)
# 1226527167.0
# 1226498367
</code></pre>

<h4>一些输出格式</h4>

<p>输出的时候如果采用“\t&#8221;进行格式化，也会出现一些对齐问题，可以采用&#8221;\t”和“%-20s&#8221;格式化代码：</p>

<pre><code># 20 could be change to another value 
print "\t%-20s%-20s%-20s%-20s%-20s%-20s"% tuple(in_list)
</code></pre>

<h4>todo</h4>

<pre><code>未完待续
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python代码规范入门]]></title>
    <link href="http://blog.ourren.com/blog/2015/07/08/pythondai-ma-gui-fan-ru-men/"/>
    <updated>2015-07-08T12:55:49-07:00</updated>
    <id>http://blog.ourren.com/blog/2015/07/08/pythondai-ma-gui-fan-ru-men</id>
    <content type="html"><![CDATA[<p>虽然接触Python已经有好几年了，同时前前后后也开发过很多小工具或者系统，但是一直觉得代码不是很规范，最近抽空了解了这方面的资料，现归纳如下，也方便pythoner学习，文章首先介绍Python代码规范的程序，然后分享在Pycharm中嵌入Pylint程序来实现快速检测代码质量。</p>

<p>Google开放的各类语言代码规范中就有就有「Python风格规范」, 里面对语言规范和风格规范进行了详细的描述，不失为提升自己代码规范的入门资料。但是让我阅读「编写高质量代码 改善Python程序的91个建议」此书时才发现原来Google这种代码规范属于「PEP8」规范。同样，PEP8也不是唯一的风格检测程序，类似的应用还有Pychecker、Pylint、Pyflakes等。其中，Pychecker是Google Python Style Guide推荐的工具；Pylint因可以非常方便地通过编辑配置文件实现公司或团队的风格检测而受到许多人的青睐；Pyflakes则因为易于集成到vim中，所以使用的人也非常多。这样看我们只需要选择一个适合自己的代码规范即可，而如上所述，Pylint高可配置性，高可定制性，并且可以很容易写小插件来添加功能。因此，我最终选择了Pylint来实现代码规范检测。</p>

<!--more-->


<h4>Pycahrm集成Pylint</h4>

<p>Pycharm是我目前最喜欢的Python IDE「请不要把Sublime拿来对比，当你写大项目的时候你就知道区别了」。当我搜索如何把Pylint集成到Pycharm的时候发现其实资料很少「参考4,5」，按着步骤做还有些问题，遂修正如下：</p>

<p>安装pylint</p>

<pre><code>sudo pip install pylint
</code></pre>

<p>依次打开如下菜单：</p>

<pre><code>Open “Settings &gt; Tools &gt; External Tools” and press the “+” button.
</code></pre>

<p><img src="http://blog.ourren.com/upload/pycharm_0.jpg" alt="step1" /></p>

<p>设置相关参数，参数和工作目录请使用宏，点击即可选择:</p>

<p><img src="http://blog.ourren.com/upload/pycharm_1.png" alt="step1" /></p>

<p>添加此插件到工具栏：在工具栏点右键&mdash;“Customize Menus and Toolbars”&mdash;“Main Toolbar”&mdash;“Help Topics”&mdash;-&ldquo;Add after&rdquo;&mdash;&ldquo;External Tools&rdquo;&mdash;&ldquo;Pylint&rdquo;, 然后就搞定了。</p>

<h4>测试实践</h4>

<p>代码写好了之后按一下这个按钮即可对改代码进行规范性检测，同时测试报告会给出你不符合规格的行数和问题，测试效果可以参照「6」进行测试，例如测试下面的代码：</p>

<pre><code> Customize Menus and Toolbars#coding:utf-8
'''
    a test function module
'''
import urllib
import time

def fetch(url):
    '''
        fetch url
    '''
    content = urllib.urlopen(url).read()
    f_html = open('tmp%s.html' % str(time.time()), 'w')
    f_html.write(content)
    f_html.close()

def main(urls):
    '''
        main func to be called
    '''
    for url in urls:
        fetch(url)

if __name__ == '__main__':
    FROM_URLS = ['http://www.baidu.com','http://www.sohu.com']
    main(FROM_URLS)
</code></pre>

<p>测试报告如下，可以发现此代码最终得到了「10.00/10」，说明代码规范非常不错。</p>

<pre><code>/usr/local/bin/pylint pyl.py
No config file found, using default configuration


Report
======
14 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|method   |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|function |2      |2          |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |13     |41.94 |14       |-1.00      |
+----------+-------+------+---------+-----------+
|docstring |10     |32.26 |10       |=          |
+----------+-------+------+---------+-----------+
|comment   |2      |6.45  |2        |=          |
+----------+-------+------+---------+-----------+
|empty     |6      |19.35 |5        |+1.00      |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |0      |1        |-1.00      |
+-----------+-------+---------+-----------+
|refactor   |0      |0        |=          |
+-----------+-------+---------+-----------+
|warning    |0      |0        |=          |
+-----------+-------+---------+-----------+
|error      |0      |0        |=          |
+-----------+-------+---------+-----------+



Global evaluation
-----------------
Your code has been rated at 10.00/10 (previous run: 9.29/10, +0.71)


Process finished with exit code 0
</code></pre>

<h4>参考资料</h4>

<ol>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/">Google Python 风格指南 - 中文版</a></li>
<li><a href="https://book.douban.com/subject/25910544/">编写高质量代码 改善Python程序的91个建议</a></li>
<li><a href="https://www.jetbrains.com/pycharm/">Pycharm download</a></li>
<li><a href="http://blog.saturnlaboratories.co.za/archive/2012/09/10/running-pylint-pycharm">Running PyLint in PyCharm</a></li>
<li><a href="http://softwaretester.info/integrate-pylint-in-pycharm/">Integrate pylint in PyCharm</a></li>
<li><a href="http://www.the5fire.com/python-clean-code-pylint.html">python代码检查工具pylint-让你的python更规范</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中域名处理技巧]]></title>
    <link href="http://blog.ourren.com/blog/2015/04/26/python-with-domain/"/>
    <updated>2015-04-26T12:05:01-07:00</updated>
    <id>http://blog.ourren.com/blog/2015/04/26/python-with-domain</id>
    <content type="html"><![CDATA[<p>Python中经常会遇到各种字符串处理问题，而在网络请求这块又经常与URL或者域名打交道，本文侧重介绍Python在处理URL/或者域名中的技巧，涉及到的Python主要有如下几种：</p>

<ul>
<li>urlparse</li>
<li>tldextract</li>
<li>dnspython</li>
<li>domaintools</li>
</ul>


<!--more-->


<h3>验证域名</h3>

<p>判断一个域名是否有效，可以试用domaintools工具来实现，并且也有解析域名的功能，例如下面代码可以从域名的构成上分析是否有效「即不验证是否可ping」，另外也可以获取子域名和后缀：</p>

<pre><code>from domaintools import Domain
d = Domain('www.example.com')

&gt;&gt;&gt; d.valid
True

&gt;&gt;&gt; d.domain
u'example.com'

&gt;&gt;&gt; d.subdomain
u'www'

&gt;&gt;&gt; d.tld
u'com'

&gt;&gt;&gt; d.sld
u'example'
</code></pre>

<p>更多可以参见<a href="https://github.com/devhub/domaintools">Domain parsing with Python</a>.</p>

<h3>域名解析</h3>

<p>主从给定的URL提取其主机「即请求域名」，协议，路径，甚至参数。 例如从<a href="http://blog.ourren.com/2015/04/14/ip-information-with-python">http://blog.ourren.com/2015/04/14/ip-information-with-python</a> 获取“blog.ourren.com”, “http&#8221;, &ldquo;/2015/04/14/ip-information-with-python/&#8221;。</p>

<p>此类问题一般采用urlparse来进行处理，针对处理后的数据进行拼接即可获得，示例代码如下：</p>

<pre><code>from urlparse import urlparse
print urlparse('http://blog.ourren.com/2015/04/14/ip-information-with-python/')
ParseResult(scheme='http', netloc='blog.ourren.com', path='/2015/04/14/ip-information-with-python/', params='', query='', fragment='')
</code></pre>

<h3>主域名</h3>

<p>主要是指获取域名的主域名「即需要去除子域名」和域名后缀，例如从<a href="http://blog.ourren.com/2015/04/14/ip-information-with-python">http://blog.ourren.com/2015/04/14/ip-information-with-python</a> 获取“ourren.com”，“com”；</p>

<p>这类问题可以通过tldextract进行处理，而tldextract则是对tld库进行了封装，使用起来比较方便，示例代码如下：</p>

<pre><code>import tldextract
tldextract.extract("http://blog.ourren.com/2015/04/14/ip-information-with-python/")

ExtractResult(subdomain='blog', domain='ourren', suffix='com')
</code></pre>

<h3>子域名</h3>

<p>其实获取特定域名的子域名的思路主要有几种：基于字典的暴力解析；基于搜索引擎结果的去重分析；基于域传送漏洞；基于全球网站数据的筛选；并且也有很多开源的工具可以参考，<a href="https://www.sec-wiki.com/topic/3">SecWiki-二级域名搜索工具汇总</a> 就对这些工具进行了汇总，所以这里就不具体讨论了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用公开接口获取IP信息]]></title>
    <link href="http://blog.ourren.com/blog/2015/04/14/ip-information-with-python/"/>
    <updated>2015-04-14T11:20:48-07:00</updated>
    <id>http://blog.ourren.com/blog/2015/04/14/ip-information-with-python</id>
    <content type="html"><![CDATA[<p>其实关于IP信息的讨论和文章非常多，但是选择适合一种简洁并且有效的方法无疑是最佳的。同时查询IP信息主要由两种方式：在线查询/接口，本地IP数据库。 现将目前这方面的资源总结如下：</p>

<h4>在线平台/接口</h4>

<p>虽然目前能够提供IP信息查询的平台很多，但是国内最著名的可能还是<a href="http://ip138.com/">ip138</a>，但是IP138目前能够提供的IP信息确实太少了，不管是做渗透还是做项目相信大家都不会采用这个查询，目前做得不错的主要有如下接口，鉴于IP信息存在国外和国内的差别，因此还是简单做下分类：</p>

<!--more-->


<p>国内IP信息查询平台：</p>

<ul>
<li><a href="http://www.ipip.net/">IPIP</a></li>
<li><a href="http://ip.qq.com/">腾讯IP</a></li>
<li><a href="http://ip.taobao.com/">淘宝IP</a></li>
<li><a href="http://ip138.com/">IP138</a></li>
</ul>


<p>国外IP信息查询平台：</p>

<ul>
<li><a href="http://ip-api.com/">ip-api</a></li>
<li><a href="https://db-ip.com/">db-ip</a></li>
<li><a href="http://bgp.he.net/">BGP</a></li>
<li><a href="http://www.ip2location.com/demo">ip2location</a></li>
</ul>


<p>国内的查询相对比较简洁，而国外的在线平台给出的数据相对比较多，但是db-ip和ip2location每天都有限制查询，而ip-api则直接提供了API的查询接口，并且没有限制查询数量。</p>

<h4>本地IP数据库</h4>

<p>如果所做系统不能联网或者由于其它原因需要离线IP信息查询，国内和国外都有很著名的离线IP数据库,在项目需求不高时可以使用，现统计如下：</p>

<ul>
<li>国内的<a href="http://www.cz88.net/">IP纯真数据库</a>；</li>
<li>国外的<a href="http://dev.maxmind.com/zh-hans/geoip/legacy/geolite/">MaxMind Geo数据库</a>；</li>
<li>国内最近的<a href="http://www.ipip.net/download.html">ipip</a></li>
</ul>


<h4>Python查询接口</h4>

<p>Python写接口查询就相对比较容易了，但是鉴于很多接口都请求次数限制，因此需要考虑的问题还是比较多，总结如下：</p>

<ul>
<li>Python下使用requests进行https请求时，可能会遇到证书问题，当设置“verify=False”时会出现警告信息，可以通过导入warning库进行处理，具体见<a href="https://github.com/kennethreitz/requests/issues/2214">这里</a>;</li>
<li>如果是采用网页进行请求匹配，最好直接用字符串查找替换（replace,split）就OK，正则会有一些问题；</li>
<li>如果HTTP请求可以通过添加代理来绕过查询次数限制；</li>
</ul>


<p>写了三个平台(ip-api, db-ip, ip2location)的查询接口，大家可以拿去直接用, 推荐ip-api这个接口。</p>

<p>项目地址：<a href="https://github.com/ourren/ip-api">ip-api</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用MTR分析网络状况]]></title>
    <link href="http://blog.ourren.com/blog/2015/03/27/diagnosing-network-issue-with-mtr/"/>
    <updated>2015-03-27T12:00:33-07:00</updated>
    <id>http://blog.ourren.com/blog/2015/03/27/diagnosing-network-issue-with-mtr</id>
    <content type="html"><![CDATA[<p>平时测试网络状况一般都使用「ping, tracert, nslookup」这几个命令，但是<a href="https://github.com/traviscross/mtr">Mtr</a>(My traceroute)是一是一个非常棒的网络连通性判断工具，它结合了ping, traceroute,nslookup 的相关特性。当网络链路出现问题时很多人会用ping命令，可以简单的测试网络的连通性，看下丢包率，但是却无法确定是在哪里出现了问题；有些人就会用tracert命令来查看路由，或者用nslookup命令来查看DNS是否可用；如果你也觉得这三个命令太麻烦的话，那就用mtr吧，并且显示界面很美「没觉得么？」<!--more --></p>

<pre><code>                           My traceroute  [v0.71]
ts3-142.ts.cn.tlan (0.0.0.0)                           Fri Aug  3 22:39:50 2007
Keys:  Help   Display mode   Restart statistics   Order of fields   quit
                                              Packets               Pings
 Host                                       Loss%  Last   Avg  Best  Wrst StDev
 1. 172.16.76.1                              0.0%   0.5   0.4   0.4   0.5   0.1
 2. 202.108.132.17                           0.0% 179.0  20.2   2.3 179.0  55.8
 3. 172.19.140.69                            0.0%  13.7  10.3   6.2  17.1   3.8
 4. 172.17.0.17                              0.0%   9.3  16.5   8.6  62.3  16.3
 5. 172.16.0.57                              0.0%   9.9  11.2   6.1  21.0   5.4
 6. 192.168.0.25                             0.0%   7.3  11.4   5.1  17.2   4.2
 7. 210.74.176.241                          10.0% 110.1 109.6  92.7 123.3  11.3
 8. 202.96.13.101                           20.0% 104.9 111.8 101.4 126.5   9.3
 9. 202.106.192.233                         30.0% 120.7 113.8  85.5 138.8  17.2
10. 61.148.143.26                           10.0%  99.7 112.0  99.7 120.9   6.9
11. 202.96.8.246                            20.0%  97.0 108.2  92.3 137.4  14.3
12. 210.77.38.126                           11.1% 133.0 113.8  97.0 133.0  11.8
13. 
</code></pre>

<h4>安装步骤</h4>

<p>Mac下直接用brew进行安装「虽然经常吐槽brew各种不如linux下的包管理软件，但是有时候还是不错」：</p>

<pre><code>brew install mtr
sudo /usr/local/Cellar/mtr/0.86/sbin/mtr 8.8.8.8
ln -s /usr/local/Cellar/mtr/0.86/sbin/mtr /usr/bin
sudo mtr 8.8.4.4
</code></pre>

<p>Linux貌似就更简单：</p>

<pre><code>yum -y install mtr
apt-get install mtr-tiny
</code></pre>

<p>Windows只能用这<a href="http://sourceforge.net/projects/winmtr/">WinMTR</a>替代下。</p>

<h4>相关命令</h4>

<p>查看help:</p>

<pre><code>root@ts3-142 ~]# mtr --help
usage: mtr [-hvrctglspni46] [--help] [--version] [--report]
                [--report-cycles=COUNT] [--curses] [--gtk]
                [--raw] [--split] [--no-dns] [--address interface]
                [--psize=bytes/-s bytes]
                [--interval=SECONDS] HOSTNAME [PACKETSIZE]

各主要参数解释如下：
--report                       追踪结果以报告模式输出
--report-cycles=COUNT          定义追踪的次数，默认为16
--raw                          使结果以原始格式输出
--split                        将每次追踪的结果分别列出来，不象--report一样，统计整个结果
--no-dns                       只显示ip地址，不解析ip地址对应的主机名
--psize=bytes/-s bytes         定义数据包的大小，单位是字节
</code></pre>

<p>日常一般这样子用就可以得到前面的报告结果了。</p>

<pre><code>mtr --report -c 10 -n www.turbolinux.com.cn
//或者
 mtr --report www.google.com
 mtr --no-dns --report google.com
</code></pre>
]]></content>
  </entry>
  
</feed>
